; Compiled by GCC
.text
	.align 2
.proc _isspace
.global _isspace
_isspace:
;  Function 'isspace'; 0 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#24	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lb	r2,3(r30)
	addi	r1,r0,#0
	andi	r3,r2,#0x00ff
	seqi	r4,r3,#32
	bnez	r4,L3
	nop	; delay slot nop
	andi	r3,r2,#0x00ff
	seqi	r4,r3,#9
	bnez	r4,L3
	nop	; delay slot nop
	andi	r3,r2,#0x00ff
	seqi	r4,r3,#10
	bnez	r4,L3
	nop	; delay slot nop
	j	L2
	nop	; delay slot nop
L3:
	addi	r1,r0,#1
L2:
	j	L1
	nop	; delay slot nop
L1:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _isspace
	.align 2
.proc _isxdigit
.global _isxdigit
_isxdigit:
;  Function 'isxdigit'; 0 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#24	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lb	r2,3(r30)
	addi	r1,r0,#0
	andi	r3,r2,#0x00ff
	sgtui	r4,r3,#47
	beqz	r4,L7
	nop	; delay slot nop
	andi	r3,r2,#0x00ff
	sleui	r4,r3,#57
	bnez	r4,L6
	nop	; delay slot nop
	j	L7
	nop	; delay slot nop
L7:
	andi	r3,r2,#0x00ff
	sgtui	r4,r3,#96
	beqz	r4,L8
	nop	; delay slot nop
	andi	r3,r2,#0x00ff
	sleui	r4,r3,#102
	bnez	r4,L6
	nop	; delay slot nop
	j	L8
	nop	; delay slot nop
L8:
	andi	r3,r2,#0x00ff
	sgtui	r4,r3,#64
	beqz	r4,L5
	nop	; delay slot nop
	andi	r3,r2,#0x00ff
	sleui	r4,r3,#65
	bnez	r4,L6
	nop	; delay slot nop
	j	L5
	nop	; delay slot nop
L6:
	addi	r1,r0,#1
L5:
	j	L4
	nop	; delay slot nop
L4:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _isxdigit
	.align 2
.proc _DisableIntrs
.global _DisableIntrs
_DisableIntrs:
;  Function 'DisableIntrs'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	addi	r2,r0,#15
	sw	(r1),r2
	jal	_SetIntrs
	nop	; delay slot nop
	addi	r29,r29,#8
	add	r2,r0,r1
	add	r1,r0,r2
	j	L9
	nop	; delay slot nop
L9:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _DisableIntrs
	.align 2
.proc _EnableIntrs
.global _EnableIntrs
_EnableIntrs:
;  Function 'EnableIntrs'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	addi	r2,r0,#0
	sw	(r1),r2
	jal	_SetIntrs
	nop	; delay slot nop
	addi	r29,r29,#8
	add	r2,r0,r1
	add	r1,r0,r2
	j	L10
	nop	; delay slot nop
L10:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _EnableIntrs
	.align 2
.proc _RestoreIntrs
.global _RestoreIntrs
_RestoreIntrs:
;  Function 'RestoreIntrs'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	lw	r2,(r30)
	addi	r29,r29,#-8
	add	r1,r0,r29
	sw	(r1),r2
	jal	_SetIntrs
	nop	; delay slot nop
	addi	r29,r29,#8
	add	r3,r0,r1
	add	r1,r0,r3
	j	L11
	nop	; delay slot nop
L11:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _RestoreIntrs
.data
	.align 2
_nfreepages:
	.word 0
	.align 2
_freemapmax:
	.word 0
	.align 2
_negativeone:
	.word -1
.text
	.align 2
.proc _MemoryGetSize
.global _MemoryGetSize
_MemoryGetSize:
;  Function 'MemoryGetSize'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	lhi	r2,#-1
	addui	r2,r2,#0
	lw	r1,(r2)
	j	L14
	nop	; delay slot nop
L14:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryGetSize
	.align 2
.proc _setFreemap
.global _setFreemap
_setFreemap:
;  Function 'setFreemap'; 8 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#32	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lw	r2,(r30)
	add	r1,r0,r2
	sgei	r2,r1,#0
	bnez	r2,L16
	nop	; delay slot nop
	addi	r1,r1,#31
L16:
	srai	r1,r1,#0x5
	sw	-12(r30),r1
	lw	r1,(r30)
	add	r2,r0,r1
	sgei	r3,r2,#0
	bnez	r3,L17
	nop	; delay slot nop
	addi	r2,r2,#31
L17:
	srai	r2,r2,#0x5
	addi	r3,r0,#32
	movi2fp	f0,r2
	movi2fp	f1,r3
	mult	f0,f0,f1
	movfp2i	r2,f0
	sub	r1,r1,r2
	sw	-16(r30),r1
	lw	r1,-12(r30)
	addi	r3,r0,#4
	movi2fp	f0,r1
	movi2fp	f1,r3
	mult	f0,f0,f1
	movfp2i	r2,f0
	lhi	r31,((_freemap)>>16)&0xffff
	addui	r31,r31,(_freemap)&0xffff
	add	r1,r2,r31
	lw	r2,-12(r30)
	addi	r4,r0,#4
	movi2fp	f0,r2
	movi2fp	f1,r4
	mult	f0,f0,f1
	movfp2i	r3,f0
	lhi	r31,((_freemap)>>16)&0xffff
	addui	r31,r31,(_freemap)&0xffff
	add	r2,r3,r31
	addi	r3,r0,#1
	lw	r4,-16(r30)
	sll	r3,r3,r4
	lw	r2,(r2)
	or	r3,r2,r3
	sw	(r1),r3
L15:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _setFreemap
.data
	.align 2
LC0:
	.ascii "Initializing memory module\n\000"
.text
	.align 2
.proc _MemoryModuleInit
.global _MemoryModuleInit
_MemoryModuleInit:
;  Function 'MemoryModuleInit'; 16 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#40	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	lhi	r1,((_lastosaddress)>>16)&0xffff
	addui	r1,r1,(_lastosaddress)&0xffff
	lw	r2,(r1)
	addi	r1,r2,#4092
	srli	r2,r1,#0xc
	sw	-16(r30),r2
	add	r2,r0,r29
	jal	_MemoryGetSize
	nop	; delay slot nop
	srli	r2,r1,#0xc
	sw	-20(r30),r2
	lhi	r1,((_freemapmax)>>16)&0xffff
	addui	r1,r1,(_freemapmax)&0xffff
	lw	r2,-20(r30)
	addi	r3,r2,#31
	add	r2,r0,r3
	sgei	r3,r2,#0
	bnez	r3,L19
	nop	; delay slot nop
	addi	r2,r2,#31
L19:
	srai	r2,r2,#0x5
	sw	(r1),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L20
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC0)>>16)&0xffff
	addui	r2,r2,(LC0)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L20:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L21
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC0)>>16)&0xffff
	addui	r2,r2,(LC0)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L21:
	nop
	addi	r1,r0,#0
	sw	-12(r30),r1
L22:
	lhi	r1,((_freemapmax)>>16)&0xffff
	addui	r1,r1,(_freemapmax)&0xffff
	lw	r2,-12(r30)
	lw	r1,(r1)
	slt	r2,r2,r1
	bnez	r2,L25
	nop	; delay slot nop
	j	L23
	nop	; delay slot nop
L25:
	lw	r1,-12(r30)
	addi	r2,r0,#4
	movi2fp	f0,r1
	movi2fp	f1,r2
	mult	f0,f0,f1
	movfp2i	r1,f0
	lhi	r5,((_freemap)>>16)&0xffff
	addui	r5,r5,(_freemap)&0xffff
	add	r2,r1,r5
	addi	r1,r0,#0
	sw	(r2),r1
L24:
	lw	r2,-12(r30)
	addi	r1,r2,#1
	add	r2,r0,r1
	sw	-12(r30),r2
	j	L22
	nop	; delay slot nop
L23:
	lhi	r1,((_nfreepages)>>16)&0xffff
	addui	r1,r1,(_nfreepages)&0xffff
	addi	r2,r0,#0
	sw	(r1),r2
	lw	r1,-16(r30)
	sw	-12(r30),r1
L26:
	lw	r1,-12(r30)
	lw	r2,-20(r30)
	slt	r1,r1,r2
	bnez	r1,L29
	nop	; delay slot nop
	j	L27
	nop	; delay slot nop
L29:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,-12(r30)
	sw	(r1),r2
	jal	_setFreemap
	nop	; delay slot nop
	addi	r29,r29,#8
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lhi	r1,((_nfreepages)>>16)&0xffff
	addui	r1,r1,(_nfreepages)&0xffff
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lw	r3,(r2)
	addi	r2,r3,#1
	add	r3,r0,r2
	sw	(r1),r3
L28:
	lw	r2,-12(r30)
	addi	r1,r2,#1
	add	r2,r0,r1
	sw	-12(r30),r2
	j	L26
	nop	; delay slot nop
L27:
	nop
	addi	r1,r0,#0
	sw	-12(r30),r1
L30:
	lw	r1,-12(r30)
	slei	r2,r1,#254
	bnez	r2,L33
	nop	; delay slot nop
	j	L31
	nop	; delay slot nop
L33:
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,-12(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,-12(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	4(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,-12(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	8(r1),r2
L32:
	lw	r2,-12(r30)
	addi	r1,r2,#1
	add	r2,r0,r1
	sw	-12(r30),r2
	j	L30
	nop	; delay slot nop
L31:
L18:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryModuleInit
	.align 2
.proc _MemoryTranslateUserToSystem
.global _MemoryTranslateUserToSystem
_MemoryTranslateUserToSystem:
;  Function 'MemoryTranslateUserToSystem'; 16 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#40	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lw	r1,4(r30)
	andi	r2,r1,#4095
	sw	-20(r30),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,4(r30)
	sw	(r1),r2
	jal	_MemoryGetPageNumber
	nop	; delay slot nop
	addi	r29,r29,#8
	sw	-12(r30),r1
	addi	r29,r29,#-8
	add	r1,r0,r29
	addi	r2,r0,#4095
	sw	(r1),r2
	jal	_invert
	nop	; delay slot nop
	addi	r29,r29,#8
	lw	r2,(r30)
	lw	r3,-12(r30)
	addi	r4,r0,#4
	movi2fp	f0,r3
	movi2fp	f1,r4
	mult	f0,f0,f1
	movfp2i	r3,f0
	add	r2,r3,r2
	addi	r3,r2,#96
	lw	r2,(r3)
	and	r1,r1,r2
	lw	r2,-20(r30)
	add	r1,r1,r2
	sw	-16(r30),r1
	lw	r1,-16(r30)
	j	L34
	nop	; delay slot nop
L34:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryTranslateUserToSystem
.data
	.align 2
LC1:
	.ascii "Translating %p to %p Data: %s\n\000"
.text
	.align 2
.proc _MemoryMoveBetweenSpaces
.global _MemoryMoveBetweenSpaces
_MemoryMoveBetweenSpaces:
;  Function 'MemoryMoveBetweenSpaces'; 16 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#32	; alloc local storage
	sw	0(r29),r2
	addi	r1,r0,#0
	sw	-16(r30),r1
L36:
	lw	r1,12(r30)
	sgti	r2,r1,#0
	bnez	r2,L38
	nop	; delay slot nop
	j	L37
	nop	; delay slot nop
L38:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	lw	r2,8(r30)
	sw	4(r1),r2
	jal	_MemoryTranslateUserToSystem
	nop	; delay slot nop
	addi	r29,r29,#8
	sw	-12(r30),r1
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L39
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC1)>>16)&0xffff
	addui	r2,r2,(LC1)&0xffff
	sw	(r1),r2
	lw	r2,8(r30)
	sw	4(r1),r2
	lw	r2,-12(r30)
	sw	8(r1),r2
	lw	r2,-12(r30)
	sw	12(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
L39:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L40
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC1)>>16)&0xffff
	addui	r2,r2,(LC1)&0xffff
	sw	(r1),r2
	lw	r2,8(r30)
	sw	4(r1),r2
	lw	r2,-12(r30)
	sw	8(r1),r2
	lw	r2,-12(r30)
	sw	12(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
L40:
	lw	r1,-12(r30)
	snei	r2,r1,#0
	bnez	r2,L41
	nop	; delay slot nop
	j	L37
	nop	; delay slot nop
L41:
	lw	r2,-12(r30)
	andi	r1,r2,#4095
	addi	r2,r0,#4096
	sub	r1,r2,r1
	sw	-20(r30),r1
	lw	r1,-20(r30)
	lw	r2,12(r30)
	sgt	r1,r1,r2
	beqz	r1,L42
	nop	; delay slot nop
	lw	r1,12(r30)
	sw	-20(r30),r1
L42:
	lw	r1,16(r30)
	sgei	r2,r1,#0
	beqz	r2,L43
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lw	r2,4(r30)
	sw	(r1),r2
	lw	r2,-12(r30)
	sw	4(r1),r2
	lw	r2,-20(r30)
	sw	8(r1),r2
	jal	_bcopy
	nop	; delay slot nop
	addi	r29,r29,#16
	j	L44
	nop	; delay slot nop
L43:
	addi	r29,r29,#-16
	add	r1,r0,r29
	lw	r2,-12(r30)
	sw	(r1),r2
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r2,-20(r30)
	sw	8(r1),r2
	jal	_bcopy
	nop	; delay slot nop
	addi	r29,r29,#16
L44:
	lw	r1,12(r30)
	lw	r2,-20(r30)
	sub	r1,r1,r2
	sw	12(r30),r1
	lw	r1,-16(r30)
	lw	r2,-20(r30)
	add	r1,r1,r2
	sw	-16(r30),r1
	lw	r1,4(r30)
	lw	r2,-20(r30)
	add	r1,r1,r2
	sw	4(r30),r1
	lw	r1,8(r30)
	lw	r2,-20(r30)
	add	r1,r1,r2
	sw	8(r30),r1
	j	L36
	nop	; delay slot nop
L37:
	lw	r1,-16(r30)
	j	L35
	nop	; delay slot nop
L35:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryMoveBetweenSpaces
	.align 2
.proc _MemoryCopySystemToUser
.global _MemoryCopySystemToUser
_MemoryCopySystemToUser:
;  Function 'MemoryCopySystemToUser'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r2,8(r30)
	sw	8(r1),r2
	lw	r2,12(r30)
	sw	12(r1),r2
	addi	r2,r0,#1
	sw	16(r1),r2
	jal	_MemoryMoveBetweenSpaces
	nop	; delay slot nop
	addi	r29,r29,#24
	add	r2,r0,r1
	add	r1,r0,r2
	j	L45
	nop	; delay slot nop
L45:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryCopySystemToUser
	.align 2
.proc _MemoryCopyUserToSystem
.global _MemoryCopyUserToSystem
_MemoryCopyUserToSystem:
;  Function 'MemoryCopyUserToSystem'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	lw	r2,8(r30)
	sw	4(r1),r2
	lw	r2,4(r30)
	sw	8(r1),r2
	lw	r2,12(r30)
	sw	12(r1),r2
	addi	r2,r0,#-1
	sw	16(r1),r2
	jal	_MemoryMoveBetweenSpaces
	nop	; delay slot nop
	addi	r29,r29,#24
	add	r2,r0,r1
	add	r1,r0,r2
	j	L46
	nop	; delay slot nop
L46:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryCopyUserToSystem
.data
	.align 2
LC2:
	.ascii "Fault %x SP %x\n\000"
	.align 2
LC3:
	.ascii "we got here fault: %u, stack: %u\n\000"
	.align 2
LC4:
	.ascii "Segmentation fault (core dumped)\n\000"
	.align 2
LC5:
	.ascii "%p\n\000"
.text
	.align 2
.proc _MemoryPageFaultHandler
.global _MemoryPageFaultHandler
_MemoryPageFaultHandler:
;  Function 'MemoryPageFaultHandler'; 16 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#40	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	lw	r1,(r30)
	lw	r2,(r1)
	addi	r1,r2,#308
	lw	r2,(r1)
	sw	-12(r30),r2
	lw	r1,(r30)
	lw	r2,(r1)
	addi	r1,r2,#156
	lw	r2,(r1)
	sw	-16(r30),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,-12(r30)
	sw	(r1),r2
	jal	_MemoryGetPageNumber
	nop	; delay slot nop
	addi	r29,r29,#8
	sw	-20(r30),r1
	lw	r1,-16(r30)
	lhi	r5,#31
	addui	r5,r5,#61440
	and	r2,r1,r5
	sw	-16(r30),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L48
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC2)>>16)&0xffff
	addui	r2,r2,(LC2)&0xffff
	sw	(r1),r2
	lw	r2,-12(r30)
	sw	4(r1),r2
	lw	r2,-16(r30)
	sw	8(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
L48:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L49
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC2)>>16)&0xffff
	addui	r2,r2,(LC2)&0xffff
	sw	(r1),r2
	lw	r2,-12(r30)
	sw	4(r1),r2
	lw	r2,-16(r30)
	sw	8(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
L49:
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC3)>>16)&0xffff
	addui	r2,r2,(LC3)&0xffff
	sw	(r1),r2
	lw	r2,-12(r30)
	sw	4(r1),r2
	lw	r2,-16(r30)
	sw	8(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
	lw	r1,-12(r30)
	lw	r2,-16(r30)
	sgeu	r1,r1,r2
	beqz	r1,L50
	nop	; delay slot nop
	add	r2,r0,r29
	jal	_MemoryAllocPage
	nop	; delay slot nop
	sw	-24(r30),r1
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,-24(r30)
	sw	(r1),r2
	jal	_MemorySetupPte
	nop	; delay slot nop
	addi	r29,r29,#8
	lw	r2,(r30)
	lw	r3,-20(r30)
	addi	r4,r0,#4
	movi2fp	f0,r3
	movi2fp	f1,r4
	mult	f0,f0,f1
	movfp2i	r3,f0
	add	r2,r3,r2
	addi	r3,r2,#96
	sw	(r3),r1
	addi	r1,r0,#1
	j	L47
	nop	; delay slot nop
L50:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC4)>>16)&0xffff
	addui	r2,r2,(LC4)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC5)>>16)&0xffff
	addui	r2,r2,(LC5)&0xffff
	sw	(r1),r2
	lw	r2,(r30)
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	add	r2,r0,r29
	jal	_ProcessKill
	nop	; delay slot nop
	addi	r1,r0,#-1
	j	L47
	nop	; delay slot nop
L47:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryPageFaultHandler
.data
	.align 2
LC6:
	.ascii "no free page i %d freemapmax %d!\n\000"
	.align 2
LC7:
	.ascii "successfully allocated page\n\000"
.text
	.align 2
.proc _MemoryAllocPage
.global _MemoryAllocPage
_MemoryAllocPage:
;  Function 'MemoryAllocPage'; 16 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#40	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	addi	r1,r0,#0
	sw	-16(r30),r1
	addi	r1,r0,#0
	sw	-20(r30),r1
	addi	r1,r0,#0
	sw	-24(r30),r1
	lhi	r1,((_nfreepages)>>16)&0xffff
	addui	r1,r1,(_nfreepages)&0xffff
	lw	r2,(r1)
	snei	r1,r2,#0
	bnez	r1,L52
	nop	; delay slot nop
	addi	r1,r0,#-1
	j	L51
	nop	; delay slot nop
L52:
	nop
L53:
	lw	r1,-16(r30)
	addi	r2,r0,#4
	movi2fp	f0,r1
	movi2fp	f1,r2
	mult	f0,f0,f1
	movfp2i	r1,f0
	lhi	r5,((_freemap)>>16)&0xffff
	addui	r5,r5,(_freemap)&0xffff
	add	r2,r1,r5
	lw	r1,(r2)
	snei	r2,r1,#0
	bnez	r2,L56
	nop	; delay slot nop
	lhi	r1,((_freemapmax)>>16)&0xffff
	addui	r1,r1,(_freemapmax)&0xffff
	lw	r2,-16(r30)
	lw	r1,(r1)
	slt	r2,r2,r1
	bnez	r2,L55
	nop	; delay slot nop
	j	L56
	nop	; delay slot nop
L56:
	j	L54
	nop	; delay slot nop
L55:
	lw	r2,-16(r30)
	addi	r1,r2,#1
	add	r2,r0,r1
	sw	-16(r30),r2
	j	L53
	nop	; delay slot nop
L54:
	lhi	r1,((_freemapmax)>>16)&0xffff
	addui	r1,r1,(_freemapmax)&0xffff
	lw	r2,-16(r30)
	lw	r1,(r1)
	sge	r2,r2,r1
	beqz	r2,L57
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC6)>>16)&0xffff
	addui	r2,r2,(LC6)&0xffff
	sw	(r1),r2
	lw	r2,-16(r30)
	sw	4(r1),r2
	lhi	r2,((_freemapmax)>>16)&0xffff
	addui	r2,r2,(_freemapmax)&0xffff
	lw	r3,(r2)
	sw	8(r1),r3
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
	addi	r1,r0,#-1
	j	L51
	nop	; delay slot nop
L57:
	nop
L58:
	lw	r1,-24(r30)
	snei	r2,r1,#0
	beqz	r2,L60
	nop	; delay slot nop
	j	L59
	nop	; delay slot nop
L60:
	lw	r1,-16(r30)
	addi	r2,r0,#4
	movi2fp	f0,r1
	movi2fp	f1,r2
	mult	f0,f0,f1
	movfp2i	r1,f0
	lhi	r5,((_freemap)>>16)&0xffff
	addui	r5,r5,(_freemap)&0xffff
	add	r2,r1,r5
	lw	r1,(r2)
	lw	r2,-20(r30)
	srl	r1,r1,r2
	andi	r2,r1,#1
	sw	-24(r30),r2
	lw	r2,-20(r30)
	addi	r1,r2,#1
	add	r2,r0,r1
	sw	-20(r30),r2
	j	L58
	nop	; delay slot nop
L59:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,-20(r30)
	addi	r3,r2,#-1
	add	r2,r0,r3
	sw	-20(r30),r2
	addi	r3,r0,#1
	sll	r2,r3,r2
	sw	(r1),r2
	jal	_invert
	nop	; delay slot nop
	addi	r29,r29,#8
	lw	r2,-16(r30)
	addi	r4,r0,#4
	movi2fp	f0,r2
	movi2fp	f1,r4
	mult	f0,f0,f1
	movfp2i	r3,f0
	lhi	r5,((_freemap)>>16)&0xffff
	addui	r5,r5,(_freemap)&0xffff
	add	r2,r3,r5
	lw	r3,-16(r30)
	addi	r4,r0,#4
	movi2fp	f0,r3
	movi2fp	f1,r4
	mult	f0,f0,f1
	movfp2i	r3,f0
	lhi	r5,((_freemap)>>16)&0xffff
	addui	r5,r5,(_freemap)&0xffff
	add	r4,r3,r5
	lw	r3,(r4)
	and	r1,r3,r1
	sw	(r2),r1
	lw	r1,-16(r30)
	add	r2,r0,r1
	slli	r1,r2,#0x5
	lw	r2,-20(r30)
	add	r1,r1,r2
	sw	-12(r30),r1
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lhi	r1,((_nfreepages)>>16)&0xffff
	addui	r1,r1,(_nfreepages)&0xffff
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lw	r3,(r2)
	addi	r2,r3,#-1
	add	r3,r0,r2
	sw	(r1),r3
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L61
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC7)>>16)&0xffff
	addui	r2,r2,(LC7)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L61:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L62
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC7)>>16)&0xffff
	addui	r2,r2,(LC7)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L62:
	lw	r1,-12(r30)
	j	L51
	nop	; delay slot nop
L51:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryAllocPage
.data
	.align 2
LC8:
	.ascii "Setting up pte Address: %p\n\000"
.text
	.align 2
.proc _MemorySetupPte
.global _MemorySetupPte
_MemorySetupPte:
;  Function 'MemorySetupPte'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L64
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC8)>>16)&0xffff
	addui	r2,r2,(LC8)&0xffff
	sw	(r1),r2
	lw	r2,(r30)
	add	r3,r0,r2
	slli	r2,r3,#0xc
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L64:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L65
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC8)>>16)&0xffff
	addui	r2,r2,(LC8)&0xffff
	sw	(r1),r2
	lw	r2,(r30)
	add	r3,r0,r2
	slli	r2,r3,#0xc
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L65:
	lw	r1,(r30)
	add	r2,r0,r1
	slli	r1,r2,#0xc
	ori	r2,r1,#1
	add	r1,r0,r2
	j	L63
	nop	; delay slot nop
L63:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemorySetupPte
	.align 2
.proc _MemoryGetPageNumber
.global _MemoryGetPageNumber
_MemoryGetPageNumber:
;  Function 'MemoryGetPageNumber'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	lw	r1,(r30)
	srli	r2,r1,#0xc
	add	r1,r0,r2
	j	L66
	nop	; delay slot nop
L66:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryGetPageNumber
.data
	.align 2
LC9:
	.ascii "Freeing page %d\n\000"
.text
	.align 2
.proc _MemoryFreePage
.global _MemoryFreePage
_MemoryFreePage:
;  Function 'MemoryFreePage'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#109
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L68
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC9)>>16)&0xffff
	addui	r2,r2,(LC9)&0xffff
	sw	(r1),r2
	lw	r2,(r30)
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L68:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((_debugstr)>>16)&0xffff
	addui	r2,r2,(_debugstr)&0xffff
	sw	(r1),r2
	addi	r2,r0,#43
	sw	4(r1),r2
	jal	_dindex
	nop	; delay slot nop
	addi	r29,r29,#8
	snei	r2,r1,#0
	beqz	r2,L69
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC9)>>16)&0xffff
	addui	r2,r2,(LC9)&0xffff
	sw	(r1),r2
	lw	r2,(r30)
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L69:
	addi	r29,r29,#-8
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	jal	_setFreemap
	nop	; delay slot nop
	addi	r29,r29,#8
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lhi	r1,((_nfreepages)>>16)&0xffff
	addui	r1,r1,(_nfreepages)&0xffff
	lhi	r2,((_nfreepages)>>16)&0xffff
	addui	r2,r2,(_nfreepages)&0xffff
	lw	r3,(r2)
	addi	r2,r3,#1
	add	r3,r0,r2
	sw	(r1),r3
L67:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _MemoryFreePage
.data
	.align 2
LC10:
	.ascii "Already used\n\000"
	.align 2
LC11:
	.ascii "Allocated the block: order = %d, addr = %d, requested mem size %d, blo"
	.ascii "ck size = %d\n\000"
	.align 2
LC12:
	.ascii "Leaf node\n\000"
	.align 2
LC13:
	.ascii "node created\n\000"
	.align 2
LC14:
	.ascii "Created a left child node (order = %d, addr = %d, size = %d) of parent"
	.ascii " (order = %d, addr = %d, size %d\n\000"
	.align 2
LC15:
	.ascii "Created a right child node (order = %d, addr = %d, size = %d) of paren"
	.ascii "t (order = %d, addr = %d, size %d\n\000"
.text
	.align 2
.proc _mallocHelper
.global _mallocHelper
_mallocHelper:
;  Function 'mallocHelper'; 16 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#40	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	addi	r1,r0,#0
	sw	-12(r30),r1
	addi	r1,r0,#0
	sw	-16(r30),r1
	addi	r1,r0,#0
	sw	-20(r30),r1
	addi	r1,r0,#0
	sw	-24(r30),r1
	lw	r1,16(r30)
	add	r2,r0,r1
	slli	r1,r2,#0x1
	addi	r2,r1,#1
	sw	-20(r30),r2
	lw	r1,16(r30)
	add	r2,r0,r1
	slli	r1,r2,#0x1
	addi	r2,r1,#2
	sw	-24(r30),r2
	lw	r1,(r30)
	srai	r2,r1,#0x1f
	srli	r3,r2,#0x1f
	add	r2,r1,r3
	srai	r1,r2,#0x1
	lw	r2,4(r30)
	slt	r1,r1,r2
	bnez	r1,L72
	nop	; delay slot nop
	lw	r1,(r30)
	seqi	r2,r1,#32
	bnez	r2,L72
	nop	; delay slot nop
	j	L71
	nop	; delay slot nop
L72:
	lw	r1,16(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	beqz	r2,L73
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC10)>>16)&0xffff
	addui	r2,r2,(LC10)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	addi	r1,r0,#0
	j	L70
	nop	; delay slot nop
	j	L74
	nop	; delay slot nop
L73:
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,16(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#1
	sw	4(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,16(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	lw	r2,(r30)
	sw	8(r1),r2
	addi	r29,r29,#-24
	add	r1,r0,r29
	lhi	r2,((LC11)>>16)&0xffff
	addui	r2,r2,(LC11)&0xffff
	sw	(r1),r2
	lw	r2,12(r30)
	sw	4(r1),r2
	lw	r2,8(r30)
	sw	8(r1),r2
	lw	r2,4(r30)
	sw	12(r1),r2
	lw	r2,(r30)
	sw	16(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#24
	lw	r1,16(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,(r2)
	j	L70
	nop	; delay slot nop
L74:
L71:
	lw	r1,16(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	beqz	r2,L75
	nop	; delay slot nop
	lw	r1,-20(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,(r2)
	snei	r2,r1,#0
	bnez	r2,L75
	nop	; delay slot nop
	lw	r1,-24(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,(r2)
	snei	r2,r1,#0
	bnez	r2,L75
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC12)>>16)&0xffff
	addui	r2,r2,(LC12)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	addi	r1,r0,#0
	j	L70
	nop	; delay slot nop
L75:
	lw	r1,16(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	bnez	r2,L76
	nop	; delay slot nop
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC13)>>16)&0xffff
	addui	r2,r2,(LC13)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,16(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#1
	sw	4(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,16(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	lw	r2,8(r30)
	sw	(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,-20(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	lw	r2,8(r30)
	sw	(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,-24(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	lw	r3,(r30)
	srai	r2,r3,#0x1
	lw	r3,8(r30)
	xor	r2,r3,r2
	sw	(r1),r2
L76:
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	srai	r3,r2,#0x1
	sw	(r1),r3
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r2,8(r30)
	sw	8(r1),r2
	lw	r2,12(r30)
	addi	r3,r2,#-1
	sw	12(r1),r3
	lw	r2,-20(r30)
	sw	16(r1),r2
	jal	_mallocHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	sw	-12(r30),r1
	lw	r1,-12(r30)
	snei	r2,r1,#0
	beqz	r2,L77
	nop	; delay slot nop
	addi	r29,r29,#-32
	add	r1,r0,r29
	lhi	r2,((LC14)>>16)&0xffff
	addui	r2,r2,(LC14)&0xffff
	sw	(r1),r2
	lw	r2,12(r30)
	addi	r3,r2,#-1
	sw	4(r1),r3
	lw	r2,8(r30)
	sw	8(r1),r2
	lw	r2,(r30)
	srai	r3,r2,#0x1
	sw	12(r1),r3
	lw	r2,12(r30)
	sw	16(r1),r2
	lw	r2,8(r30)
	sw	20(r1),r2
	lw	r2,(r30)
	sw	24(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#32
	j	L78
	nop	; delay slot nop
L77:
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	srai	r3,r2,#0x1
	sw	(r1),r3
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r3,(r30)
	srai	r2,r3,#0x1
	lw	r3,8(r30)
	xor	r2,r3,r2
	sw	8(r1),r2
	lw	r2,12(r30)
	addi	r3,r2,#-1
	sw	12(r1),r3
	lw	r2,-24(r30)
	sw	16(r1),r2
	jal	_mallocHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	sw	-16(r30),r1
	lw	r1,-16(r30)
	snei	r2,r1,#0
	beqz	r2,L78
	nop	; delay slot nop
	addi	r29,r29,#-32
	add	r1,r0,r29
	lhi	r2,((LC15)>>16)&0xffff
	addui	r2,r2,(LC15)&0xffff
	sw	(r1),r2
	lw	r2,12(r30)
	addi	r3,r2,#-1
	sw	4(r1),r3
	lw	r3,(r30)
	srai	r2,r3,#0x1
	lw	r3,8(r30)
	xor	r2,r3,r2
	sw	8(r1),r2
	lw	r2,(r30)
	srai	r3,r2,#0x1
	sw	12(r1),r3
	lw	r2,12(r30)
	sw	16(r1),r2
	lw	r2,8(r30)
	sw	20(r1),r2
	lw	r2,(r30)
	sw	24(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#32
L79:
L78:
	lw	r1,-12(r30)
	lw	r3,-16(r30)
	or	r2,r1,r3
	add	r1,r0,r2
	j	L70
	nop	; delay slot nop
L70:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _mallocHelper
.data
	.align 2
LC16:
	.ascii "Entering malloc\n\000"
.text
	.align 2
.proc _malloc
.global _malloc
_malloc:
;  Function 'malloc'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC16)>>16)&0xffff
	addui	r2,r2,(LC16)&0xffff
	sw	(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
	addi	r29,r29,#-24
	add	r1,r0,r29
	addi	r2,r0,#4096
	sw	(r1),r2
	lw	r2,(r30)
	sw	4(r1),r2
	addi	r2,r0,#16384
	sw	8(r1),r2
	addi	r2,r0,#7
	sw	12(r1),r2
	addi	r2,r0,#0
	sw	16(r1),r2
	jal	_mallocHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	add	r2,r0,r1
	add	r1,r0,r2
	j	L80
	nop	; delay slot nop
L80:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _malloc
.data
	.align 2
LC17:
	.ascii "fail %d %d\n\000"
	.align 2
LC18:
	.ascii "Freed the block: order = %d, addr = %d, size = %d\n\000"
	.align 2
LC19:
	.ascii "Coalesced buddy nodes (order = %d, addr = %d, size = %d) & (order = %d"
	.ascii ", addr = %d, size = %d) into the parent node (order = %d, addr = %d\000"
	.align 2
LC20:
	.ascii ", size = %d)\n\000"
.text
	.align 2
.proc _freeHelper
.global _freeHelper
_freeHelper:
;  Function 'freeHelper'; 8 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#32	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	addi	r1,r0,#0
	sw	-12(r30),r1
	addi	r1,r0,#0
	sw	-16(r30),r1
	lw	r1,(r30)
	snei	r2,r1,#0
	bnez	r2,L82
	nop	; delay slot nop
	addi	r1,r0,#-1
	j	L81
	nop	; delay slot nop
L82:
	lw	r1,8(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,12(r30)
	lw	r2,8(r2)
	seq	r1,r1,r2
	beqz	r1,L83
	nop	; delay slot nop
	lw	r1,8(r30)
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	bnez	r2,L84
	nop	; delay slot nop
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC17)>>16)&0xffff
	addui	r2,r2,(LC17)&0xffff
	sw	(r1),r2
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r2,12(r30)
	sw	8(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
	addi	r1,r0,#-1
	j	L81
	nop	; delay slot nop
L84:
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	4(r1),r2
	addi	r29,r29,#-16
	add	r1,r0,r29
	lhi	r2,((LC18)>>16)&0xffff
	addui	r2,r2,(LC18)&0xffff
	sw	(r1),r2
	lw	r2,16(r30)
	sw	4(r1),r2
	lw	r2,4(r30)
	sw	8(r1),r2
	lw	r2,12(r30)
	sw	12(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#16
	addi	r1,r0,#0
	j	L81
	nop	; delay slot nop
L83:
	lw	r1,(r30)
	lw	r2,4(r30)
	sle	r1,r1,r2
	bnez	r1,L86
	nop	; delay slot nop
	lw	r2,12(r30)
	srai	r1,r2,#0x1
	lw	r2,4(r30)
	xor	r1,r1,r2
	lw	r2,(r30)
	slt	r1,r2,r1
	bnez	r1,L86
	nop	; delay slot nop
	j	L85
	nop	; delay slot nop
L86:
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	lw	r2,4(r30)
	sw	4(r1),r2
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r2,r3,#0x1
	addi	r3,r2,#1
	sw	8(r1),r3
	lw	r2,12(r30)
	srai	r3,r2,#0x1
	sw	12(r1),r3
	lw	r2,16(r30)
	addi	r3,r2,#-1
	sw	16(r1),r3
	jal	_freeHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	sw	-12(r30),r1
	j	L87
	nop	; delay slot nop
L85:
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	lw	r3,12(r30)
	srai	r2,r3,#0x1
	lw	r3,4(r30)
	xor	r2,r3,r2
	sw	4(r1),r2
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r2,r3,#0x1
	addi	r3,r2,#2
	sw	8(r1),r3
	lw	r2,12(r30)
	srai	r3,r2,#0x1
	sw	12(r1),r3
	lw	r2,16(r30)
	addi	r3,r2,#-1
	sw	16(r1),r3
	jal	_freeHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	sw	-16(r30),r1
L87:
	lw	r1,8(r30)
	add	r2,r0,r1
	slli	r3,r2,#0x1
	addi	r1,r3,#1
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	bnez	r2,L88
	nop	; delay slot nop
	lw	r1,8(r30)
	add	r2,r0,r1
	slli	r3,r2,#0x1
	addi	r1,r3,#2
	add	r3,r0,r1
	slli	r2,r3,#0x1
	add	r2,r2,r1
	slli	r1,r2,#0x2
	lhi	r5,((_allocTree)>>16)&0xffff
	addui	r5,r5,(_allocTree)&0xffff
	add	r2,r1,r5
	lw	r1,4(r2)
	snei	r2,r1,#0
	bnez	r2,L88
	nop	; delay slot nop
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	4(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r4,r3,#0x1
	addi	r2,r4,#1
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r4,r3,#0x1
	addi	r2,r4,#2
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r4,r3,#0x1
	addi	r2,r4,#1
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	8(r1),r2
	lhi	r1,((_allocTree)>>16)&0xffff
	addui	r1,r1,(_allocTree)&0xffff
	lw	r2,8(r30)
	add	r3,r0,r2
	slli	r4,r3,#0x1
	addi	r2,r4,#2
	add	r4,r0,r2
	slli	r3,r4,#0x1
	add	r3,r3,r2
	slli	r2,r3,#0x2
	add	r1,r1,r2
	addi	r2,r0,#0
	sw	8(r1),r2
	addi	r29,r29,#-40
	add	r1,r0,r29
	lhi	r2,((LC19)>>16)&0xffff
	addui	r2,r2,(LC19)&0xffff
	sw	(r1),r2
	lw	r2,16(r30)
	addi	r3,r2,#-1
	sw	4(r1),r3
	lw	r2,4(r30)
	sw	8(r1),r2
	lw	r2,12(r30)
	srai	r3,r2,#0x1
	sw	12(r1),r3
	lw	r2,16(r30)
	addi	r3,r2,#-1
	sw	16(r1),r3
	lw	r3,12(r30)
	srai	r2,r3,#0x1
	lw	r3,4(r30)
	xor	r2,r3,r2
	sw	20(r1),r2
	lw	r2,12(r30)
	srai	r3,r2,#0x1
	sw	24(r1),r3
	lw	r2,16(r30)
	sw	28(r1),r2
	lw	r2,4(r30)
	sw	32(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#40
	addi	r29,r29,#-8
	add	r1,r0,r29
	lhi	r2,((LC20)>>16)&0xffff
	addui	r2,r2,(LC20)&0xffff
	sw	(r1),r2
	lw	r2,12(r30)
	sw	4(r1),r2
	jal	_printf
	nop	; delay slot nop
	addi	r29,r29,#8
L88:
	lw	r1,-12(r30)
	lw	r3,-16(r30)
	or	r2,r1,r3
	add	r1,r0,r2
	j	L81
	nop	; delay slot nop
L81:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _freeHelper
	.align 2
.proc _mfree
.global _mfree
_mfree:
;  Function 'mfree'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-24
	add	r1,r0,r29
	lw	r2,(r30)
	sw	(r1),r2
	addi	r2,r0,#16384
	sw	4(r1),r2
	addi	r2,r0,#0
	sw	8(r1),r2
	addi	r2,r0,#4096
	sw	12(r1),r2
	addi	r2,r0,#7
	sw	16(r1),r2
	jal	_freeHelper
	nop	; delay slot nop
	addi	r29,r29,#24
	add	r2,r0,r1
	add	r1,r0,r2
	j	L89
	nop	; delay slot nop
L89:
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _mfree
.data
	.align 2
_freemap:
	.space 32
	.align 2
_allocTree:
	.space 3060
.text
	.align 2
.proc _invert
_invert:
;  Function 'invert'; 0 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#24	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lw	r2,(r30)
	lhi	r1,((_negativeone)>>16)&0xffff
	addui	r1,r1,(_negativeone)&0xffff
	lw	r4,(r1)
	xor	r3,r2,r4
	add	r1,r0,r3
	j	L12
	nop	; delay slot nop
L12:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _invert
